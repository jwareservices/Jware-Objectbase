/*
 * Copyright (C) 2015 J. Paul Jackson <jwareservices@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package objectbase;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.jware.objectbase.core.DataHeader;
import org.jware.objectbase.core.DataMarshaller;
import org.jware.objectbase.disk.DataStoreDirector;
import org.jware.objectbase.disk.DiskRecordHeader;
import org.jware.objectbase.disk.DiskRecordHeaderFactory;
import org.jware.objectbase.disk.IndexedDataDirector;
import org.jware.objectbase.disk.ObjectDataMarshaller;
import org.jware.objectbase.exception.DataDirectorException;
import org.jware.objectbase.util.Utilities;
import static org.jware.objectbase.util.Utilities.Utility;

/**
 *
 * @author J. Paul Jackson <jwareservices@gmail.com>
 */
public class ObjectBaseTestGui extends javax.swing.JFrame {

    int numOfRecs;
    int howManyToAdd;
    int howManyToGet;
    int whichOneToDelete;
    List keyList;
    Person[] people;
    int howMany;
    final JFileChooser fileChooser;
    File file;

    DataMarshaller<Person> marshaller = new ObjectDataMarshaller();
    DataStoreDirector dm;
    IndexedDataDirector<Integer, DataHeader> indexDirector;

    /**
     * Creates new form ObjectBaseTestGui
     */
    public ObjectBaseTestGui() {
        initComponents();
        fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "ObjectBase Files", "jwob", "idx");
        fileChooser.setFileFilter(filter);

        numOfRecs = 0;
        /*        dm = DataStoreDirector.createDataStoreDirector("People.odb", marshaller);
         indexDirector = new IndexedDataDirector(dm, new DiskRecordHeaderFactory());
         keyList = new ArrayList();
         */    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customersTable = new javax.swing.JTable();
        quitButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        howManyText = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        outPutTextArea = new javax.swing.JTextArea();
        addRandomRecords = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        numOfRecTextB = new javax.swing.JTextField();
        openButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        fileNameTextB = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        firstNameTextB = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lastNameTextB = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        phoneNumberText = new javax.swing.JTextField();
        deleteFiles = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        addButton.setText("ADD A RECORD");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("DELETE RECORD");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Phone Number", "Visit Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        customersTable.setToolTipText("");
        customersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(customersTable);
        if (customersTable.getColumnModel().getColumnCount() > 0) {
            customersTable.getColumnModel().getColumn(0).setResizable(false);
            customersTable.getColumnModel().getColumn(1).setResizable(false);
            customersTable.getColumnModel().getColumn(2).setResizable(false);
            customersTable.getColumnModel().getColumn(3).setResizable(false);
        }

        quitButton.setText("QUIT");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        updateButton.setText("UPDATE RECORD");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        howManyText.setBackground(new java.awt.Color(255, 255, 255));
        howManyText.setText("1");

        outPutTextArea.setColumns(20);
        outPutTextArea.setRows(5);
        jScrollPane2.setViewportView(outPutTextArea);

        addRandomRecords.setText("ADD RANDOM # RECORDS");
        addRandomRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRandomRecordsActionPerformed(evt);
            }
        });

        jLabel4.setText("Total Records:");

        numOfRecTextB.setEditable(false);
        numOfRecTextB.setBackground(new java.awt.Color(255, 255, 255));

        openButton.setText("OPEN");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        closeButton.setText("CLOSE");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        createButton.setText("CREATE");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Current Object Base File:");

        fileNameTextB.setEditable(false);
        fileNameTextB.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        firstNameTextB.setEditable(false);
        firstNameTextB.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("First Name");

        jLabel2.setText("Last Name");

        lastNameTextB.setEditable(false);
        lastNameTextB.setBackground(new java.awt.Color(255, 255, 255));
        lastNameTextB.setDragEnabled(true);

        jLabel3.setText("Phone Number");

        phoneNumberText.setEditable(false);
        phoneNumberText.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(firstNameTextB, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(lastNameTextB, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(phoneNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(phoneNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastNameTextB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, 0)
                        .addComponent(firstNameTextB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        deleteFiles.setText("DEL FILES");
        deleteFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFilesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fileNameTextB, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(numOfRecTextB, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addRandomRecords)
                                        .addGap(18, 18, 18)
                                        .addComponent(howManyText, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(updateButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deleteButton))))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(quitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(openButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(createButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createButton)
                    .addComponent(jLabel5)
                    .addComponent(fileNameTextB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(numOfRecTextB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(updateButton)
                    .addComponent(deleteButton)
                    .addComponent(openButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(howManyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addRandomRecords)
                    .addComponent(closeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deleteFiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quitButton)))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (null == indexDirector) {
            Utilities.alertDialog("No file is open.", "Oops!");
        } else {
            try {
                JTextField fname = new JTextField();
                JTextField lname = new JTextField();
                Object[] message = {
                    "First Name:", fname,
                    "Last Name:", lname
                };

                dm.openChannel();
                int option = JOptionPane.showConfirmDialog(null, message, "Enter Name", JOptionPane.OK_CANCEL_OPTION);
                if (option == JOptionPane.OK_OPTION) {
                    DefaultTableModel model = (DefaultTableModel) customersTable.getModel();
                    Person p = new Person();
                    p.firstName = fname.getText();
                    p.lastName = lname.getText();
                    p.phoneNumber = new PhoneNumber(Utilities.getRandom(111, 900),
                            Utilities.getRandom(111, 888),
                            Utilities.getRandom(1111, 9000));
                    model.addRow(new Object[]{p.firstName, p.lastName, p.phoneNumber.toString(), ""});
                    indexDirector.insertData(numOfRecs, p);
                    indexDirector.writeIndex();

                    keyList.add(numOfRecs);
                    numOfRecTextB.setText(String.valueOf(indexDirector.getRecordCount()));
                    //                   numOfRecTextB.setText(String.valueOf(customersTable.getRowCount()));
                    firstNameTextB.setText(p.firstName);
                    lastNameTextB.setText(p.lastName);
                    phoneNumberText.setText(p.phoneNumber.toString());
                    numOfRecs++;
                }
                dm.closeChannel();
            } catch (IOException | DataDirectorException | IllegalArgumentException cause) {
                Utilities.alertDialog(cause.toString(), " Error in add method");
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed


    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        if (Utilities.confirmDialog("Exit the program.", "Quit")) {
            try {
                if (null != indexDirector) {
                    indexDirector.writeIndex();
                }
                System.exit(0);

            } catch (IOException cause) {
                Utilities.alertDialog(cause.toString(), "Error in quit method");
            }
        }
    }//GEN-LAST:event_quitButtonActionPerformed

    private void customersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customersTableMouseClicked
        int sel = customersTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) customersTable.getModel();
        firstNameTextB.setText((String) model.getValueAt(sel, 0));
        lastNameTextB.setText((String) model.getValueAt(sel, 1));
        phoneNumberText.setText((String) model.getValueAt(sel, 2));
        try {
            indexDirector.readIndex();
            Utilities.Clock clock = Utility.getTimer();
            DataHeader record = indexDirector.getHeader((Integer) keyList.get(sel));
            dm.openChannel();
            clock.startTime();
            Person p = (Person) indexDirector.retrieveData(sel);
            System.out.printf("\nTime for (" + p + ") read: \nIn MS: %.6f",clock.step() / 1000f);
            outPutTextArea.append(record.toString() + "\n");
        } catch (IOException | ClassNotFoundException | DataDirectorException cause) {
            Utilities.alertDialog(cause.toString(), "Error in mouse clicked in table method");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_customersTableMouseClicked

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (null == indexDirector) {
            Utilities.alertDialog("No file is open.", "Oops!");
        } else {
            try {
                JTextField fname = new JTextField();
                JTextField lname = new JTextField();
                Object[] message = {
                    "First Name: " + firstNameTextB.getText() + " change to:", fname,
                    "Last Name " + lastNameTextB.getText() + " change to:", lname
                };
                int option = JOptionPane.showConfirmDialog(null, message, "Enter Name", JOptionPane.OK_CANCEL_OPTION);
                if (option == JOptionPane.OK_OPTION) {
                    DefaultTableModel model = (DefaultTableModel) customersTable.getModel();
                    int sel = customersTable.getSelectedRow();
                    dm.openChannel();

                    Person p = (Person) indexDirector.retrieveData((Integer) keyList.get(sel));
                    dm.closeChannel();
                    System.out.println(p.toString() + "\n");
                    p.firstName = fname.getText();
                    p.lastName = lname.getText();
                    System.out.println(p.toString() + "\n");
                    model.setValueAt(p.firstName, sel, 0);
                    model.setValueAt(p.lastName, sel, 1);
                    dm.openChannel();
                    indexDirector.updateData((Integer) keyList.get(sel), p);
                    dm.closeChannel();
                    indexDirector.writeIndex();
                }
            } catch (IOException | NullPointerException | DataDirectorException cause) {
                Utilities.alertDialog(cause.toString(), "Error in update method");
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void addRandomRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRandomRecordsActionPerformed
        if (null == indexDirector) {
            Utilities.alertDialog("No file is open.", "Oops!");
        } else {
            DefaultTableModel model = (DefaultTableModel) customersTable.getModel();
            howMany = Integer.parseInt(howManyText.getText());
            people = new Person[howMany];
            Utilities.Clock clock = Utility.getTimer();
            clock.startTime();
            try {
                dm.openChannel();
                for (int i = 0; i < howMany; i++) {
                    String fname = Utilities.getRandomString(3);
                    String lname = Utilities.getRandomString(10);
                    people[i] = new Person(i, fname, lname,
                            new PhoneNumber(Utilities.getRandom(111, 900),
                                    Utilities.getRandom(111, 888),
                                    Utilities.getRandom(1111, 9000)), null);
                    if (i % 3 == 0) {
                        people[i].setDate(LocalDate.now());
                    }
                    keyList.add(numOfRecs);
                    indexDirector.insertData((Integer) keyList.get(numOfRecs++), people[i]);
                }
                dm.closeChannel();
                for (int i = 0; i < howMany; i++) {
                    model.addRow(new Object[]{people[i].firstName, people[i].lastName, people[i].phoneNumber.toString(), ""});
                }

                numOfRecTextB.setText(String.valueOf(numOfRecs));
                System.out.println("\nTime for (" + howMany + ") inserts: " + clock.step() / 1000f + " ms");
                indexDirector.writeIndex();
            } catch (final DataDirectorException | IOException cause) {
                Utilities.alertDialog(cause.toString(), "Error in random method");
            }
        }
    }//GEN-LAST:event_addRandomRecordsActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed

        file = new File("Data.jwob");
        fileChooser.setSelectedFile(file);
        int returnVal = fileChooser.showDialog(ObjectBaseTestGui.this, "Create Object DB");

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();

            dm = DataStoreDirector.createDataStoreDirector(file.getName(), marshaller);
            indexDirector = new IndexedDataDirector(dm, new DiskRecordHeaderFactory());
            keyList = new ArrayList();
            fileNameTextB.setText(file.getName());
        }
    }//GEN-LAST:event_createButtonActionPerformed


    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(ObjectBaseTestGui.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();

            dm = DataStoreDirector.createDataStoreDirector(file.getName(), marshaller);
            indexDirector = new IndexedDataDirector(dm, new DiskRecordHeaderFactory());
            keyList = new ArrayList();
            try {
                dm.openChannel();
                indexDirector.readIndex();
                fileNameTextB.setText(indexDirector.getfileName());
                DefaultTableModel model = (DefaultTableModel) customersTable.getModel();
                Utilities.Clock clock = Utility.getTimer();
                clock.startTime();

                Collection list = indexDirector.getIndexValues();
                for (Iterator it = list.iterator(); it.hasNext();) {
                    DataHeader rec = (DataHeader) it.next();
                    keyList.add(rec.key());
                    Person p = (Person) indexDirector.retrieveData((Integer) rec.key());
                    model.addRow(new Object[]{p.firstName, p.lastName, p.phoneNumber.toString(), ""});
                    numOfRecTextB.setText(String.valueOf(numOfRecs));
                    //                   numOfRecTextB.setText(String.valueOf(indexDirector.getRecordCount()));
                }
                dm.closeChannel();
                System.out.println("\nTime for (" + howMany + ") inserts: " + clock.step() / 1000f + " ms");

            } catch (IOException | ClassNotFoundException | DataDirectorException cause) {
                Utilities.alertDialog(cause.toString(), " Error opening file.");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_openButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        indexDirector.closeIndex();
        keyList.clear();
        numOfRecTextB.setText("0");
        firstNameTextB.setText("");
        lastNameTextB.setText("");
        phoneNumberText.setText("");
        fileNameTextB.setText("");
        outPutTextArea.setText("");
        DefaultTableModel model = (DefaultTableModel) customersTable.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void deleteFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFilesActionPerformed
        if (Utilities.confirmDialog("Are you sure you want to delete the data file?", "Warning")) {
            Path obj = Paths.get(file.getName());
            try {
                Files.delete(obj);
            } catch (IOException cause) {
                Utilities.alertDialog(cause.toString(), " close");
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_deleteFilesActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (Utilities.confirmDialog("Are you sure you want to delete the record?", "Warning")) {
            try {
                DefaultTableModel model = (DefaultTableModel) customersTable.getModel();
                int sel = customersTable.getSelectedRow();
                indexDirector.deleteData((Integer) keyList.get(sel));
                model.removeRow(sel);
                numOfRecs--;
                numOfRecTextB.setText(String.valueOf(numOfRecs));
            } catch (DataDirectorException cause) {
                Utilities.alertDialog(cause.toString(), " Unable to delete data.");
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ObjectBaseTestGui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ObjectBaseTestGui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ObjectBaseTestGui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ObjectBaseTestGui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ObjectBaseTestGui().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addRandomRecords;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton createButton;
    private javax.swing.JTable customersTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteFiles;
    private javax.swing.JTextField fileNameTextB;
    private javax.swing.JTextField firstNameTextB;
    private javax.swing.JTextField howManyText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField lastNameTextB;
    private javax.swing.JTextField numOfRecTextB;
    private javax.swing.JButton openButton;
    private javax.swing.JTextArea outPutTextArea;
    private javax.swing.JTextField phoneNumberText;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

}
